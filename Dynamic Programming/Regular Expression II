
int Solution::isMatch(const string A, const string B) {
    int m=A.size();
    int isfirst=1;
    string newPattern="";
    for(int i=0;i<B.size();i++)
    {
        if(B[i]=='*')
        {
            if(isfirst)
            {
                newPattern+=B[i];
                isfirst=0;
            }
        }
        else
        {
            newPattern+=B[i];
            isfirst=1;
        }
    }
    int n=newPattern.size();
    vector<vector<bool>> dp(2, vector<bool>(n+1,false));
    dp.at(0).at(0)=true;
    for(int j=1;j<=n;j++)
    if(newPattern.at(j-1)=='*')
    dp.at(0).at(j)=dp.at(0).at(j-2);
    for(int i=1;i<=m;i++)
    {
        dp[1].assign(n+1, false);
        for(int j=1;j<=n;j++)
        {
            
            //if(i>1){cout<<j<<endl;}
            if(A.at(i-1)==newPattern.at(j-1)||newPattern.at(j-1)=='.')
            dp.at(1).at(j)=dp.at(0).at(j-1);
            else if(newPattern.at(j-1)=='*')
            {
                dp[1][j]=dp[1][j-2];
                if(newPattern[j-2]=='.'|| newPattern[j-2]==A[i-1])
                    dp.at(1).at(j)=(dp[1][j]|dp[0][j]);
            }
        }
        dp.at(0)=dp.at(1);
        
    }
    if(dp.at(1).at(n))return 1;
    return 0;
}
