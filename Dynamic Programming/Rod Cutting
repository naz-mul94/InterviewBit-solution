typedef long long ll;
vector<int> ans;
vector<int> cut;
vector<vector<ll>> dp;
vector<vector<int>> parent;

ll rec(int l, int r)
{
    if(l+1>=r)return 0;
    ll &minCost=dp[l][r];
    if(dp[l][r]!=-1)return minCost;
    minCost=LLONG_MAX;
    int bestIndex;
    for(int i=l+1;i<r;i++)
    {
        ll p=rec(l, i)+rec(i, r)+(ll)cut[r]-(ll)cut[l];
        if(p<minCost)
        {
            minCost=p;
            bestIndex=i;
        }
    }
    parent[l][r]=bestIndex;
    return minCost;
}

void backTrack(int l, int r)
{
    if(l+1>=r)return;
    ans.push_back(cut[parent[l][r]]);
    backTrack(l, parent[l][r]);
    backTrack(parent[l][r], r);
}

vector<int> Solution::rodCut(int A, vector<int> &B) {
    B.push_back(A);
    B.insert(B.begin(), 0);
    
    int n=B.size();
    cut.clear();
    cut=B;
    
    dp.resize(n);
    parent.resize(n);
    ans.clear();
    for(int i=0;i<n;i++)
    {
        dp[i].resize(n);
        parent[i].resize(n);
        for(int j=0;j<n;j++)
        dp[i][j]=-1;
    }
    
    ll best=rec(0, n-1);
    backTrack(0, n-1);
    return ans;
}
