int Solution::findMedian(vector<vector<int> > &A) {
      int lo,hi;
    
    if(A.size()==0)
    {
         lo=B[0];
        hi=B[B.size()-1];
    }
    else if(B.size()==0)
    {
        lo=A[0];
        hi=A[A.size()-1];
    }
    else
    {
        lo=min(A[0],B[0]);
        hi=max(A[A.size()-1],B[B.size()-1]);
    }
    ;
    int total=0,mem,desired=(A.size()+B.size())/2;
    //cout<<lo<<" "<<hi<<endl;
    while(lo<hi)
    {
        total=0;
        int mid=(lo+hi)/2;
        total+=upper_bound(A.begin(),A.end(),mid)-A.begin();
        total+=upper_bound(B.begin(),B.end(),mid)-B.begin();
        //cout<<lo<<"  "<<hi<<"   "<<mid<<"   "<<total<<endl;
        if(total<desired)
        {
            lo=mid+1;
            
        }
        else
        {
            hi=mid;
        }
       
         
    }//cout<<lo<<endl;
     if((A.size()+B.size())%2==0)
        {
            int i=lower_bound(A.begin(),A.end(),lo)-A.begin();
            int j=lower_bound(B.begin(),B.end(),lo)-B.begin();
            //cout<<A[i]<<"   "<<B[j]<<endl;
            if(A[i]>B[j])
            {
                return ((float)lo+(float)A[i])/2.0;
            }
            else
            return ((float)lo+(float)B[i])/2.0;
            
        }
        else 
            return lo;
    
    
}
