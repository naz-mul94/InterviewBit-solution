
vector<vector<int> > Solution::zigzagLevelOrder(TreeNode* A) {
    vector<vector<int>> ans;
    vector<int> level;
    bool leftToRight=true;
    stack<TreeNode *> currentLevel, nextLevel;
    if(A)
    currentLevel.push(A);
    else return ans;
    
    
    while(!currentLevel.empty())
    {
        TreeNode *temp=currentLevel.top();
        currentLevel.pop();
        
        level.push_back(temp->val);
        if(temp)
        {
            if(leftToRight)
            {
                if(temp->left)
                nextLevel.push(temp->left);
                if(temp->right)
                nextLevel.push(temp->right);
            }
            else
            {
                if(temp->right)
                nextLevel.push(temp->right);
                
                if(temp->left)
                nextLevel.push(temp->left);
            }
        }
        if(currentLevel.empty())
        {
            leftToRight=!leftToRight;
            ans.push_back(level);
            level.clear();
            swap(currentLevel, nextLevel);
        }
        
    }
    return ans;
}


============================================approach 2==================
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<vector<int> > Solution::zigzagLevelOrder(TreeNode* A) {
   vector<vector<int> > ans;
   vector<int> level_traversal;
   queue<TreeNode*> q;
   TreeNode* temp = A;
   if(!A)return ans;
   bool dir = false; 
   q.push(temp);
   q.push(NULL);
   while(!q.empty())
   {
       temp = q.front();
       q.pop();
    //    if(level_traversal.size()&&level_traversal[0]==141)printf("hello2\n");
       if(!temp)
       {
           if(dir)
            {
                   reverse(level_traversal.begin(), level_traversal.end());
                   ans.push_back(level_traversal);
                   dir = !dir;
            }
            else 
            {
                   ans.push_back(level_traversal);
                   dir = !dir;
            }
            level_traversal.clear();
           if(!q.empty())
               q.push(NULL);
               
           
       }
       else
       {
            if(temp->left)q.push(temp->left);
            if(temp->right)q.push(temp->right);
           level_traversal.push_back(temp->val);
        //    if(level_traversal[0]==141)printf("hello\n");
       }
   }
//    printf("%d \n", level_traversal[0]);
   return ans;
}

