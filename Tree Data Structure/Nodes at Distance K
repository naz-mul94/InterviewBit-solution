/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

void subtree_node(TreeNode* A, int C, vector<int> &ans)
{
    if(!A || C <0)
    {
        return;
    }
    if(C==0)
    {
        ans.push_back(A->val);
        return;
    }
    subtree_node(A->left, C-1, ans);
    subtree_node(A->right, C-1, ans);
}

int node_at_k(TreeNode* A, int B, int C, vector<int> &ans) 
{
    int d_l=-1, d_r=-1;
    if(!A)return -1;
    if(A->val == B)
    {
        if(A->left)
        subtree_node(A->left,C-1, ans);
        if(A->right)
        subtree_node(A->right, C-1, ans);
        return 0;
    }
    else
    {
        if(A->left)
        d_l = node_at_k(A->left, B, C, ans);
        if(A->right)
        d_r = node_at_k(A->right, B, C, ans);
        if(d_l >= 0)
        {
            if(d_l+1 == C)
            {
                ans.push_back(A->val);
            }
            else
            {
                if(A->right)
                subtree_node(A->right, C-d_l-2, ans);
                
            }
            return d_l+1;
        }
        else if(d_r >= 0)
        {
            if(d_r +1 == C)
            {
                ans.push_back(A->val);
            }
            else
            {
                if(A->left)
                subtree_node(A->left, C-d_r-2, ans);
            }
            
            return d_r +1;
        }
        return -1;

    }
}
vector<int> Solution::distanceK(TreeNode* A, int B, int C) {
    vector<int> ans;
    node_at_k(A, B, C, ans);
    return ans;
}
