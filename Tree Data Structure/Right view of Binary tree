/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<int> Solution::solve(TreeNode* A) {
    vector<int> ans;
    if(!A->left && !A->right)
    {
        ans.push_back(A->val);
        return ans;
    }
    int last_process_node;
    TreeNode* temp=A;
    queue<TreeNode* > q;
    q.push(A);
    q.push(NULL);
    while(!q.empty())
    {
        temp = q.front();
        if(!temp)
        {
            ans.push_back(last_process_node);
            q.pop();
            if(!q.empty())
            q.push(NULL);
        }
        else
        {
            if(temp->left)q.push(temp->left);
            if(temp->right)q.push(temp->right);
            last_process_node = temp->val;
            q.pop();
        }
        
    }
    // ans.push_back(last_process_node);
    return ans;
}
